(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average-damp f)
  (define (average x y)
    (/ (+ x y) 2))
  (lambda (x) (average x (f x))))

(define (repeated f n)
  (define (compose f g)
    (lambda (x) (f (g x))))
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

(define (nth-power x n)
  (define (multiply a)
    (* x a))
  ((repeated multiply n) 1))

(define (average-damp-n-times f n)
  ((repeated average-damp n) f))

(define (lg n)
  (cond ((> (/ n 2) 1) (+ 1 (lg (/ n 2))))
        ((< (/ n 2) 1) 0)
        (else 1)))

(define (nth-root x n)
  (fixed-point (average-damp-n-times (lambda (y) (/ x (nth-power y (- n 1)))) (lg n))
               1.0))

(nth-root 125 3)

(nth-root 1024 10)
