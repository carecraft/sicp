(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

(define (smooth f)
  (define dx 0.00001)
  (lambda (x) (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3)))

((smooth square) 5)

(define (smooth-n-times f n)
  (let ((n-times-smooth (repeated smooth n)))
      (n-times-smooth f)))

((smooth-n-times square 3) 5)
