(define (accumulate combiner null-value term a next b valid?)
  (if (> a b)
      null-value
      (if (valid? a)
          (combiner (term a)
                    (accumulate combiner null-value term (next a) next b valid?))
          (accumulate combiner null-value term (next a) next b valid?))))

(define (square x) (* x x))

(define (my-next x) (+ x 1))

(define (prime? n)
  (define (divides? a b) (= (remainder b a) 0))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (smallest-divisor n) (find-divisor n 2))
  (= n (smallest-divisor n)))

(define (sum-square-prime a b)
  (accumulate + 0 square a my-next b prime?))

(sum-square-prime 1 10)
