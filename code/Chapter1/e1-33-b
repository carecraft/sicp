(define (accumulate combiner null-value term a next b valid?)
  (if (> a b)
      null-value
      (if (valid? a)
          (combiner (term a)
                    (accumulate combiner null-value term (next a) next b valid?))
          (accumulate combiner null-value term (next a) next b valid?))))

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (my-term x) x)

(define (my-next x) (+ x 1))

(define (product-prime-to-n n)
  (define (co-prime? x)
    (= (gcd x n) 1))
  (accumulate * 1 my-term 1 my-next n co-prime?))



(product-prime-to-n 10)
